swagger: '2.0'
info:
  description: Simple card deck app for playing TOKYO-NIGHTMARE
  version: 1.4.0
  title: Simple card deck API
  # put the contact info for your development or API team
  contact:
    email: hideishi.magisystem.net@gmail.com

  license:
    name: BSD-3-Clause
    url: https://github.com/hideishi-m/decks/blob/main/LICENSE

# tags are used for organizing operations
tags:
- name: players
  description: Calls for game players
- name: admins
  description: Calls for game administrators

paths:
  /version:
    get:
      tags:
      - admins
      summary: retrieve version
      operationId: getVersion
      description: |
        Retrieves version
      produces:
      - application/json
      responses:
        200:
          description: version
          schema:
            $ref: '#/definitions/Version'
        404:
          description: no game available
  /games:
    get:
      tags:
      - admins
      - players
      summary: retrieve all games
      operationId: getGames
      description: |
        Retrieves all games available
      produces:
      - application/json
      responses:
        200:
          description: game IDs
          schema:
            type: object
            required:
            - games
            properties:
              games:
                type: array
                items:
                  type: string
                  example: '1'
    post:
      tags:
      - admins
      summary: create a new game
      operationId: addGame
      description: Creates a new game
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: gameAttributes
        description: attributes for a new game
        schema:
          $ref: '#/definitions/GameAttributes'
      responses:
        200:
          description: game ID
          schema:
            $ref: '#/definitions/Id'
        400:
          description: invalid input, object invalid
  /games/{id}:
    get:
      tags:
      - admins
      - players
      summary: retrieve a game
      operationId: getGame
      description: |
        Retrieves a game for id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: game
          schema:
            $ref: '#/definitions/Game'
        400:
          description: invalid input
        404:
          description: no game for id
    delete:
      tags:
      - admins
      summary: delete all game
      operationId: deleteGame
      description: |
        Deletes a game for id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: game ID
          schema:
            $ref: '#/definitions/Id'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/deck:
    get:
      tags:
      - players
      summary: retrieve deck
      operationId: getDeck
      description: |
        Retrieves information for the deck
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: deck
          schema:
            $ref: '#/definitions/Deck'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/deck/discard:
    put:
      tags:
      - players
      summary: discard deck
      operationId: discardDeck
      description: |
        Discards the top card of the deck
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: deck
          schema:
            $ref: '#/definitions/Deck'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/deck/recycle:
    put:
      tags:
      - players
      summary: recycle to deck
      operationId: recycleDeck
      description: |
        Recycles the top card of the pile to the deck
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: deck
          schema:
            $ref: '#/definitions/Deck'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/pile:
    get:
      tags:
      - players
      summary: retrieve pile
      operationId: getPile
      description: |
        Retrieves information for the pile
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: pile
          schema:
            $ref: '#/definitions/Pile'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/pile/shuffle:
    put:
      tags:
      - players
      summary: shuffle pile
      operationId: shufflePile
      description: |
        Recycles all cards in the pile to the deck,
        and shuffle the deck
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: pile
          schema:
            $ref: '#/definitions/Pile'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/players/{pid}:
    get:
      tags:
      - players
      summary: retrieve hand
      operationId: getHand
      description: |
        Retrieves information for the hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: hand
          schema:
            $ref: '#/definitions/Hand'
        400:
          description: invalid input
        404:
          description: no game for id or pid
  /games/{id}/players/{pid}/draw:
    put:
      tags:
      - players
      summary: draw to hand
      operationId: drawHand
      description: |
        Draws a card to the hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: hand
          schema:
            $ref: '#/definitions/Hand'
        400:
          description: invalid input
        404:
          description: no game for id or pid
  /games/{id}/players/{pid}/recycle:
    put:
      tags:
      - players
      summary: recycle to hand
      operationId: recycleHand
      description: |
        Recycles a card from the pile to the hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: hand
          schema:
            $ref: '#/definitions/Hand'
        400:
          description: invalid input
        404:
          description: no game for id or pid
  /games/{id}/players/{pid}/cards/{cid}:
    get:
      tags:
      - players
      summary: retrieve card
      operationId: getCard
      description: |
        Retrieves the card in the hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      - in: path
        name: cid
        description: Card ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: card in the hand
          schema:
            $ref: '#/definitions/HandCard'
        400:
          description: invalid input
        404:
          description: no game for id, pid or cid
  /games/{id}/players/{pid}/cards/{cid}/discard:
    put:
      tags:
      - players
      summary: discard card
      operationId: discardCard
      description: |
        Discards the card in the hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      - in: path
        name: cid
        description: Card ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: hand
          schema:
            $ref: '#/definitions/Hand'
        400:
          description: invalid input
        404:
          description: no game for id, pid or cid
  /games/{id}/players/{pid}/cards/{cid}/pass/{tid}:
    put:
      tags:
      - players
      summary: pass card
      operationId: passCard
      description: |
        Passes the card in the hand of the player to other player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      - in: path
        name: cid
        description: Card ID
        required: true
        type: integer
        format: int64
      - in: path
        name: tid
        description: Target player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: hand
          schema:
            $ref: '#/definitions/Hand'
        400:
          description: invalid input
        404:
          description: no game for id, pid or cid
  /games/{id}/players/{pid}/pick/{tid}:
    put:
      tags:
      - players
      summary: pick card
      operationId: pickCard
      description: |
        Picks a card randomly from other player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      - in: path
        name: tid
        description: Target player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: hand
          schema:
            $ref: '#/definitions/Hand'
        400:
          description: invalid input
        404:
          description: no game for id, pid or cid
  /games/{id}/tarot/deck:
    get:
      tags:
      - players
      summary: retrieve tarot deck
      operationId: getTarotDeck
      description: |
        Retrieves information for the tarot deck
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: tarot deck
          schema:
            $ref: '#/definitions/Deck'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/tarot/deck/discard:
    put:
      tags:
      - players
      summary: discard tarot deck
      operationId: discardTarotDeck
      description: |
        Discards the top tarot card of the tarot deck
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: tarot deck
          schema:
            $ref: '#/definitions/Deck'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/tarot/pile:
    get:
      tags:
      - players
      summary: retrieve tarot pile
      operationId: getTarotPile
      description: |
        Retrieves information for the tarot pile
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: tarot pile
          schema:
            $ref: '#/definitions/TarotPile'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/tarot/pile/flip:
    put:
      tags:
      - players
      summary: flip tarot pile
      operationId: flipTarotPile
      description: |
        Flips a tarot card from the tarot pile
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: tarot pile
          schema:
            $ref: '#/definitions/TarotPile'
        400:
          description: invalid input
        404:
          description: no game for id
  /games/{id}/tarot/players/{pid}:
    get:
      tags:
      - players
      summary: retrieve tarot hand
      operationId: getTarotHand
      description: |
        Retrieves information for the tarot hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: trump
          schema:
            $ref: '#/definitions/TarotHand'
        400:
          description: invalid input
        404:
          description: no game for id or pid
  /games/{id}/tarot/players/{pid}/discard:
    put:
      tags:
      - players
      summary: discard tarot hand
      operationId: discardTarotHand
      description: |
        Discards the top tarot card in the tarot hand of the player
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Game ID
        required: true
        type: integer
        format: int64
      - in: path
        name: pid
        description: Player ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: trump
          schema:
            $ref: '#/definitions/TarotHand'
        400:
          description: invalid input
        404:
          description: no game for id or pid
definitions:
  Version:
    type: object
    properties:
      version:
        type: string
        example: '1.0.0'
  Card:
    type: object
    required:
    - suit
    - rank
    - deck
    properties:
      suit:
        type: string
        enum: [C,D,H,S,X]
      rank:
        type: string
        enum: [A,'2','3','4','5','6','7','8','9','0',J,Q,K,X]
      deck:
        type: string
        example: '0'
  TarotCard:
    type: object
    required:
    - position
    - rank
    properties:
      position:
        type: string
        enum: [U,R]
      rank:
        type: string
        enum: ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','-14','-18','-2','-9','-12','-17']
  Id:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        example: '1'
  GameAttributes:
    type: object
    required:
    - players
    - tarots
    properties:
      players:
        type: array
        items:
          type: string
          example: pc1
      tarots:
        type: array
        items:
          type: string
          example: '0'
  Game:
    type: object
    required:
    - id
    - players
    properties:
      id:
        type: string
        example: '1'
      players:
        type: array
        items:
          type: string
          example: pc1
  Deck:
    type: object
    required:
    - id
    - deck
    properties:
      id:
        type: string
        example: '1'
      deck:
        type: object
        required:
        - length
        properties:
          length:
            type: integer
            format: int64
            example: 108
  Pile:
    type: object
    required:
    - id
    - pile
    properties:
      id:
        type: string
        example: '1'
      pile:
        type: object
        required:
        - length
        - card
        properties:
          length:
            type: integer
            format: int64
            example: 108
          card:
            $ref: '#/definitions/Card'
  Hand:
    type: object
    required:
    - id
    - pid
    - player
    - hand
    properties:
      id:
        type: string
        example: '1'
      pid:
        type: string
        example: '1'
      player:
        type: string
        example: pc1
      hand:
        type: object
        required:
        - length
        - cards
        properties:
          length:
            type: integer
            format: int64
            example: 108
          cards:
            type: array
            items:
              $ref: '#/definitions/Card'
  HandCard:
    type: object
    required:
    - id
    - pid
    - player
    - cid
    - card
    properties:
      id:
        type: string
        example: '1'
      pid:
        type: string
        example: '1'
      player:
        type: string
        example: pc1
      cid:
        type: string
        example: '1'
      card:
         $ref: '#/definitions/Card'
  TarotPile:
    type: object
    required:
    - id
    - pile
    properties:
      id:
        type: string
        example: '1'
      pile:
        type: object
        required:
        - length
        - card
        properties:
          length:
            type: integer
            format: int64
            example: 108
          card:
            $ref: '#/definitions/TarotCard'
  TarotHand:
    type: object
    required:
    - id
    - pid
    - player
    - hand
    properties:
      id:
        type: string
        example: '1'
      pid:
        type: string
        example: '1'
      player:
        type: string
        example: pc1
      hand:
        type: object
        required:
        - length
        - cards
        properties:
          length:
            type: integer
            format: int64
            example: 108
          cards:
            type: array
            items:
              $ref: '#/definitions/TarotCard'
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /h6623/decks/1.0.0
schemes:
 - https
